# vim: ft=cfg
#
# This is the configuration file of "rifle", ranger's file executor/opener.
# Each line consists of conditions and a command.  For each line the conditions
# are checked and if they are met, the respective command is run.
#
# Syntax:
#   <condition1> , <condition2> , ... = command
#
# The command can contain these environment variables:
#   $1-$9 | The n-th selected file
#   $@    | All selected files
#
# If you use the special command "ask", rifle will ask you what program to run.
#
# Prefixing a condition with "!" will negate its result.
# These conditions are currently supported:
#   match <regexp> | The regexp matches $1
#   ext <regexp>   | The regexp matches the extension of $1
#   mime <regexp>  | The regexp matches the mime type of $1
#   name <regexp>  | The regexp matches the basename of $1
#   path <regexp>  | The regexp matches the absolute path of $1
#   has <program>  | The program is installed (i.e. located in $PATH)
#   env <variable> | The environment variable "variable" is non-empty
#   file           | $1 is a file
#   directory      | $1 is a directory
#   number <n>     | change the number of this command to n
#   terminal       | stdin, stderr and stdout are connected to a terminal
#   X              | $DISPLAY is not empty (i.e. Xorg runs)
#
# There are also pseudo-conditions which have a "side effect":
#   flag <flags>  | Change how the program is run. See below.
#   label <label> | Assign a label or name to the command so it can
#                 | be started with :open_with <label> in ranger
#                 | or `rifle -p <label>` in the standalone executable.
#   else          | Always true.
#
# Flags are single characters which slightly transform the command:
#   f | Fork the program, make it run in the background.
#     |   New command = setsid $command >& /dev/null &
#   r | Execute the command with root permissions
#     |   New command = sudo $command
#   t | Run the program in a new terminal.  If $TERMCMD is not defined,
#     | rifle will attempt to extract it from $TERM.
#     |   New command = $TERMCMD -e $command
# Note: The "New command" serves only as an illustration, the exact
# implementation may differ.
# Note: When using rifle in ranger, there is an additional flag "c" for
# only running the current file even if you have marked multiple files.

#-------------------------------------------
# Websites
#-------------------------------------------
ext x?html?,  has vim,                                  = vim -- "$@"
ext x?html?,  has subl,                       flag f    = subl -- "$@"
ext x?html?,                                  flag f    = /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome -- "$@"
ext x?html?,                                  flag f    = /Applications/Google\ Chrome\ Dev.app/Contents/MacOS/Google\ Chrome\ Dev -- "$@"
ext x?html?,  has firefox,                    flag f    = /Applications/Firefox.app/Contents/MacOS/firefox -- "$@"
ext x?html?,  has w3m,                        terminal  = w3m "$@"

#-------------------------------------------
# Documents
#-------------------------------------------
ext pdf|epub|mobidjvu,has open,                       flag f    = open -- "$@"
ext pdf,                                              flag f    = /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome -- "$@"
# TODO
# ext docx?|odt,        has wps,                        flag f    = wps -- "$@"
# ext xlsx?|ods,        has et,                         flag f    = et -- "$@"
# ext pptx?|odp|xlt|xlw,has wpp,                        flag f    = wpp -- "$@"

#--------------------------------------------
# Code
#-------------------------------------------
ext c|cpp|cs|java|dart|py|go|pl|rb|js|sh|php|ts|html|org|ts|rkt|md|sql|r|rmd, has vim,         = vim -- "$@"
ext c|cpp|cs|java|dart|py|go|pl|rb|js|sh|php|ts|html|org|ts|rkt|md|sql|r|rmd, has subl, flag f = subl -- "$@"

ext dart = dart -- "$1"
ext py  = python -- "$1"
ext go  = nvim "$1"
ext pl  = perl -- "$1"
ext rb  = ruby -- "$1"
ext js  = node -- "$1"
ext sh  = sh -- "$1"
ext php = php -- "$1"

#-------------------------------------------
# Video/Audio with a GUI
#-------------------------------------------
mime ^video|audio|ogg$,                        flag f = open -- "$@"
mime ^video|audio|ogg$,                        flag f = /Applications/VLC.app/Contents/MacOS/VLC -- "$@"

#-------------------------------------------
# Image Viewing:
#-------------------------------------------
mime ^image,                                   flag f = open -- "$@"
mime ^image,                                   flag f = /Applications/krita.app/Contents/MacOS/krita -- "$@"

#-------------------------------------------
# Archives
#-------------------------------------------

ext ace|ar|arc|bz2?|cab|cpio|cpt|deb|dgc|dmg|gz,      has atool     = atool --list --each -- "$@" | "$PAGER"
ext iso|jar|msi|pkg|rar|shar|tar|tgz|xar|xpi|xz|zip,  has atool     = atool --list --each -- "$@" | "$PAGER"
ext 7z|ace|ar|arc|bz2?|cab|cpio|cpt|deb|dgc|dmg|gz,   has atool     = atool --extract --each -- "$@"
ext iso|jar|msi|pkg|rar|shar|tar|tgz|xar|xpi|xz|zip,  has atool     = atool --extract --each -- "$@"

ext zip,                                              has unzip     = unzip -l "$1" | less
ext zip,                                              has unzip     = for file in "$@"; do unzip -d "${file%.*}" "$file"; done
ext rar,                                              has unrar     = unrar l "$1" | less
ext rar,                                              has unrar     = for file in "$@"; do unrar x "$file"; done
ext tar|gz|bz2|xz,                                    has tar       = tar vvtf "$1" | "$PAGER"
ext tar|gz|bz2|xz,                                    has tar       = for file in "$@"; do tar vvxf "$file"; done
ext bz2,                                              has bzip2     = for file in "$@"; do bzip2 -dk "$file"; done
ext ace,                                              has unace     = unace l "$1" | less
ext ace,                                              has unace     = for file in "$@"; do unace e "$file"; done

#-------------------------------------------
# Flag t fallback terminals
#-------------------------------------------
mime ^ranger/x-terminal-emulator, has alacritty = alacritty -e "$@"
mime ^ranger/x-terminal-emulator, has urxvt = urxvt -e "$@"
mime ^ranger/x-terminal-emulator, has konsole = konsole -e "$@"
mime ^ranger/x-terminal-emulator, has terminology = terminology -e "$@"
mime ^ranger/x-terminal-emulator, has kitty = kitty -- "$@"
mime ^ranger/x-terminal-emulator, has sakura = sakura -e "$@"
mime ^ranger/x-terminal-emulator, has lilyterm = lilyterm -e "$@"
mime ^ranger/x-terminal-emulator, has cool-retro-term = cool-retro-term -e "$@"
mime ^ranger/x-terminal-emulator, has termite = termite -x '"$@"'
mime ^ranger/x-terminal-emulator, has yakuake = yakuake -e "$@"
mime ^ranger/x-terminal-emulator, has guake = guake -ne "$@"
mime ^ranger/x-terminal-emulator, has tilda = tilda -c "$@"
mime ^ranger/x-terminal-emulator, has st = st -e "$@"
mime ^ranger/x-terminal-emulator, has terminator = terminator -x "$@"
mime ^ranger/x-terminal-emulator, has pantheon-terminal = pantheon-terminal -e "$@"
mime ^ranger/x-terminal-emulator, has lxterminal = lxterminal -e "$@"
mime ^ranger/x-terminal-emulator, has mate-terminal = mate-terminal -x "$@"
mime ^ranger/x-terminal-emulator, has xfce4-terminal = xfce4-terminal -x "$@"
mime ^ranger/x-terminal-emulator, has gnome-terminal = gnome-terminal -- "$@"
mime ^ranger/x-terminal-emulator, has xterm = xterm -e "$@"

#-------------------------------------------
# Misc
#-------------------------------------------
mime  ^text,  label editor                                                                        = ${VISUAL:-$EDITOR} -- "$@"
mime  ^text,  label pager                                                                         = "$PAGER" -- "$@"
!mime ^text,  label editor, ext xml|json|csv|tex|py|pl|rb|js|sh|php|dart|html|org|ts|rkt|md|sql   = ${VISUAL:-$EDITOR} -- "$@"
!mime ^text,  label pager,  ext xml|json|csv|tex|py|pl|rb|js|sh|php                               = "$PAGER" -- "$@"

ext 1                         = man "$1"
# ext s[wmf]c, has zsnes, X     = zsnes "$1"
# ext s[wmf]c, has snes9x-gtk,X = snes9x-gtk "$1"
# ext nes, has fceux            = fceux "$1"
# ext exe, has wine             = wine "$1"
# ext exe, has mono             = mono "$1"
name ^[mM]akefile$            = make

# Define the editor for non-text files + pager as last action
              !mime ^text, !ext xml|json|csv|tex|py|pl|rb|js|sh|php  = ask
label editor, !mime ^text, !ext xml|json|csv|tex|py|pl|rb|js|sh|php|dart|html|org  = ${VISUAL:-$EDITOR} -- "$@"
label pager,  !mime ^text, !ext xml|json|csv|tex|py|pl|rb|js|sh|php  = "$PAGER" -- "$@"

# The very last action, so that it's never triggered accidentally, is to execute a program:
mime application/x-executable = "$1"
